{"version":3,"sources":["components/header/Header.js","components/seeMoreModal/SeeMoreModal.js","components/card/Card.js","components/cardGrid/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["links","id","text","Header","map","link","className","key","href","Card","props","card","toggleModal","bind","modalRef","createRef","elClasses","this","current","classList","contains","remove","add","onClick","ref","modalImages","imagePath","src","process","alt","viewBox","d","Component","imgPath","title","copy","cardLink","hasModalImages","hasGithubUrl","githubUrl","SeeMoreModal","liveSiteUrl","RenderCardLink","disclaimer","RenderDisclaimer","cards","techs","CardGrid","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f413a10.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst links = [\n\t{id: 'work', text: 'work'}, \n\t{id: 'adtl-exp', text: 'additional experience'},\n\t{id: 'about', text: 'about me'},\n\t{id: 'contact', text: 'get in touch'}\n];\n\nfunction Header() {\n\treturn (\n\t\t<Fragment>\n\t\t\t<h1>Jamie Gold</h1>\n\t\t\t<nav>\n\t\t\t\t{links.map((link) => <a className=\"navLink\" key={link.id} href={`#${link.id}`}>{link.text}</a>)}\n\t\t\t</nav>\n\t\t</Fragment>\n\t);\n}\n\nexport default Header;","import React, { Component, createRef, Fragment } from 'react';\n\nclass Card extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.card = props.card\n\t\tthis.toggleModal = this.toggleModal.bind(this)\n\t\tthis.modalRef = createRef()\n\t}\n\n\ttoggleModal() {\n\t\tlet elClasses = this.modalRef.current.classList;\n\t\tif (elClasses.contains('hidden')) {\n\t\t\telClasses.remove('hidden')\n\t\t} else {\n\t\t\telClasses.add('hidden')\n\t\t}\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<p className=\"see-more\" onClick={this.toggleModal}>See More <span>&rsaquo;</span></p>\n\t            <div className=\"modalWrapper hidden\" ref={this.modalRef}>\n\t            \t<div className=\"modalContent\">\n\t            \t\t{this.card.modalImages.map((imagePath) => <img src={process.env.PUBLIC_URL + imagePath} alt=\"screenshot\" key={imagePath} />)}\n\t           \t\t</div>\n\t           \t\t<div className=\"close\">\n\t           \t\t\t<svg className=\"closeIcon\" onClick={this.toggleModal} viewBox=\"0 0 100 100\"><path d=\"M50,10.917c-21.584,0-39.083,17.499-39.083,39.083S28.416,89.083,50,89.083S89.083,71.584,89.083,50  S71.584,10.917,50,10.917z M67.045,62.802c1.172,1.172,1.172,3.071,0,4.243c-0.586,0.586-1.354,0.879-2.121,0.879  s-1.535-0.293-2.121-0.878L50,54.243L37.197,67.044c-0.586,0.585-1.354,0.878-2.121,0.878s-1.535-0.293-2.121-0.879  c-1.172-1.171-1.172-3.071,0-4.243L45.757,50L32.955,37.198c-1.172-1.172-1.172-3.071,0-4.243c1.172-1.172,3.07-1.171,4.242,0  L50,45.757l12.803-12.803c1.172-1.171,3.07-1.171,4.242,0c1.172,1.171,1.172,3.071,0,4.243L54.242,50L67.045,62.802z\"></path></svg>\n\t           \t\t</div>\n\t            </div>\n\t\t\t</Fragment>\n\t\t\t        \n\t\t);\n\t}\n}\n\nexport default Card;","import React from 'react';\nimport SeeMoreModal from '../seeMoreModal/SeeMoreModal.js';\n\nfunction Card(props) {\n\tconst card = props.card;\n\n\tfunction RenderCardLink() {\n\t\tconst hasModalImages = card.modalImages;\n\t\tconst hasGithubUrl = card.githubUrl;\n\t    let cardLink;\n\n\t    if (hasModalImages) {\n\t    \tcardLink = <SeeMoreModal card={card} />;\n\t    } else if (!hasModalImages && !hasGithubUrl) {\n\t    \tcardLink = <a href={card.liveSiteUrl}>Live site</a>;\n\t    } else if (!hasModalImages && hasGithubUrl) {\n\t    \tcardLink = <span><a href={card.liveSiteUrl}>Live site</a> - <a href={card.githubUrl}>Github</a></span>;\n\t    }\n\n\t    return cardLink;\n\t}\n\n\tfunction RenderDisclaimer() {\n\t\tconst hasDisclaimer = card.disclaimer;\n\t    let disclaimer;\n\n\t    if (hasDisclaimer) {\n\t    \tdisclaimer = <p className=\"disclaimer\">{card.disclaimer}</p> ;\n\t    } else {\n\t    \treturn;\n\t    }\n\n\t    return disclaimer;\n\t}\n\t\n\n\treturn (\n\t\t<div className=\"card\">\n\t    \t<div className=\"card-image\">\n\t      \t\t<img src={process.env.PUBLIC_URL + card.imgPath} alt={card.title} />\n\t    \t</div>\n\t    \t<div className=\"card-header\">\n\t      \t\t<h3>{card.title}</h3>\n\t      \t</div>\n\t      \t<div className=\"card-copy\">\n\t        \t<p>{card.copy}</p>\n\t       \n\t      \t</div>\n\t      \t{RenderCardLink()}\n\t        {RenderDisclaimer()}\n    \t</div>\n\t\t\n\t\t        \n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../card/Card.js'\n\nconst cards = [\n\t{\n\t\ttitle: 'Swapify',\n\t\timgPath: '../../images/swapify.png',\n\t\tcopy: 'Swapify is a self-service checkout creator, meant to give cleverbridge clients the ability to create their own custom checkouts without any manual work being done by the cleverbridge Client Services team. Swapify is an app built with React and Redux, and outputs a checkout that is fully ready to process global transactions. My focus on this project was on the checkout that gets generated, and making sure the process from the Swapify app to cleverbridge checkout is as seamless as possible.',\n\t\ttechs: ['React', 'Redux', 'Node.js', 'Javascript', 'Sass', 'CSS Modules'],\n\t\tmodalImages: ['../../images/swapify.png', '../../images/swapifyModal/screen-swap-layout.png', '../../images/swapifyModal/screen-swap-header.png', '../../images/swapifyModal/screen-swap-payment.png'],\n\t\tdisclaimer: 'This project contains sensitive content and is not available for public viewing.'\n\t},\n\t{\n\t\ttitle: 'Sassy',\n\t\timgPath: '../../images/sassy-2.png',\n\t\tcopy: 'Sassy is a base architecture created to increase efficiency and decrease manual work for the cleverbridge Business Operations team. This project increased the efficiency of the team dramatically, standardized processes, and produced a higher quality result. It is built largely with Sass, Bourbon/Neat, and Gulp. I made significant contributions to version 2 of this project, and independently developed and released version 3 for the rest of the Business Operations team.',\n\t\ttechs: ['Sass', 'Gulp', 'Javascript', 'Node.js', 'Bourbon/Neat', 'CSS Modules'],\n\t\tliveSiteUrl: 'https://www.cleverbridge.com/1290/?scope=checkout&cart=153358&cfg=sass2col_live',\n\t\tdisclaimer: 'The code for this project contains sensitive content and is not available for public viewing.'\n\t},\n\t{\n\t\ttitle: 'Web Design 101',\n\t\timgPath: '../../images/webDesign101.png',\n\t\tcopy: 'In the Fall of 2015, I was presented with the opportunity to conduct a web design training course internally at cleverbridge through the cleverAcademy initiative. I selected a group of six participants and made a six week long curriculum based on HTML & CSS by Jon Duckett. The students made portfolio sites along the way and completed coding exercises. As a result of delivering an impactful course, the Client Services team internally hired three out of six participants after completion of their coding education.',\n\t\tliveSiteUrl: 'http://jamie.gold/WebDesign101/',\n\t\tgithubUrl: 'https://github.com/jamiewaxberg/Web-Design-101',\n\t\ttechs: ['HTML5', 'Sass', 'jQuery', 'Gulp', 'Bourbon/Neat']\n\t}\n];\n\nfunction CardGrid() {\n\treturn (\n\t\t<div className=\"cardGridWrapper\">\n\t\t\t{cards.map((card) => <Card card={card} key={card.title} />)}\n\t\t</div>\n\t);\n}\n\nexport default CardGrid;","import React from 'react';\nimport './App.scss';\nimport Header from './components/header/Header.js'\nimport CardGrid from './components/cardGrid/CardGrid.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Header />\n      {/*cards*/}\n      <CardGrid />\n\n      {/*extracurriculars*/}\n\n      {/*about*/}\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}